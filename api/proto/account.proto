syntax = "proto3";

option go_package="account";

package rupacinema.account;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Profile contains user information
message Profile {
    string first_name = 1;
    string last_name = 2;
    string phone_number = 3;
    string email_address = 4;
    string profile_url = 5;
    string birth_date = 6;
    string gender = 7;
}

// PrivateProfile contains private account information
message PrivateProfile{
    string password = 1;
    string security_question = 2;
    string security_answer = 3;
}

// Facebook is request payload to login with facebook account
message Facebook {
    string first_name = 1;
    string last_name = 2;
    string phone_number = 3;
    string email_address = 4;
    string profile_url = 5;
    string gender = 6;
    string birth_date = 7;
}

// Google is request payload to login using google account
message Google {
    string first_name = 1;
    string last_name = 2;
    string phone_number = 3;
    string email_address = 4;
    string profile_url = 5;
    string gender = 6;
    string birth_date = 7;
}

// Phone is request payload to login using phone number
message Phone {
    string phone = 1;
    string password = 2;
}

// Request to login
message LoginRequest {
    // User to use one of the options only.
    oneof login {
        Facebook facebook = 1;
        Google google = 2;
        Phone phone = 3;
    }
}

// LoginResponse contains jwt token on successful login
message LoginResponse {
    string token = 1;
}

// Request to create an account
message CreateUserRequest {
    // request_id to detect duplicate requests
    string request_id = 1;
    // User profile information
    Profile profile = 2;
    // Private information
    PrivateProfile private_profile = 3;
}

// Request to get the default token
message GetDefaultTokenRequest {}

// Request to retrive user profile, using either email or phone
message GetUserRequest {
    string email = 1;
    string phone = 2;
}

// Request to authenticate a user
message AuthenticateUserRequest {
    string email = 1;
    string phone = 2;
}

// Response from AuthenticateUser request
message AuthenticateResponse {
    // whether the user validation was successful
    bool valid = 1;
}

// Request to retrieve multiple users resources
message ListUsersRequest {}

// Admin represents administrator user
message Admin {
    string first_name = 1;
    string last_name = 2;
    string phone_number = 3;
    string email_address = 4;
    string user_name = 5;
    AdminLevel level = 6;
    repeated string trusted_devices = 7;
}

// AdminLevel is the administrative level of an admin
enum AdminLevel {
    READER = 0; // They can only read
    READER_AND_ONLY_FOOD = 1; // They read and can only modify food/menu items
    SUPER_ADMIN = 2; // They are avengers
}

// Request to login the admin
message LoginAdminRequest {
    string username = 1;
    string password = 2;
}

// Request to create a new admin
message CreateAdminRequest {
    string super_admin_username = 1;
    Admin new_admin = 2;
    PrivateProfile admin_private = 3;
}

// Request to get admin profile
message GetAdminRequest {
    string user_name = 1;
}

// Request to authenticate admin
message AuthenticateAdminRequest {
    string username = 1;
    AdminLevel level = 2;
}

// Manages user and admin accounts
service AccountAPI {

    // Authenticates a user to login into their account
    rpc Login (LoginRequest) returns (LoginResponse) {
        // Login method maps to HTTP POST
        // Login credentials is mappped into the body of the request
        option (google.api.http) = {
            post: "/api/account/users/login"
            body: "*"
        };
    }

    // Creates a user
    rpc CreateUser (CreateUserRequest) returns (google.protobuf.Empty) {
        // CreateUser method maps to HTTP POST 
        // request_id, profile and private_profile maps to the body of the request
        option (google.api.http) = {
            post: "/api/account/users"
            body: "*"
        };
    }

    // Retrieves default token for default user
    rpc GetDefaultToken (GetDefaultTokenRequest) returns (LoginResponse) {
        // GetDefaultToken method maps to HTTP GET
        option (google.api.http) = {
            get: "/api/account/token"
        };
    }

    // Authenticates requests from external services
    rpc AuthenticateRequest (google.protobuf.Empty) returns (google.protobuf.Empty);

    // Retrieves a user profile
    rpc GetUser (GetUserRequest) returns (Profile) {
        // GetUser method maps to HTTP GET
        // email or phone is mapped into URL query parameters
        option (google.api.http) = {
            get: "/api/account/users/profile"
        };
    }
    
    // Authenticates a user to check if they are logged in and with valid token.
    rpc AuthenticateUser (AuthenticateUserRequest) returns (AuthenticateResponse) {
        // AuthenticateUser maps to HTTP POST
        // email or phone maps to request body
        option (google.api.http) = {
            post: "/api/account/users/auth"
            body: "*"
        };
    }

    // Admin section

    // Lists all user in the database. Admins only
    rpc ListUsers (ListUsersRequest) returns (stream Profile) {
        // ListUsers maps to HTTP GET
        option (google.api.http) = {
            get: "/api/account/users"
        };
    }

    // Authenticates admins when they log in to their account
    rpc LoginAdmin (LoginAdminRequest) returns (LoginResponse) {
        // LoginAdmin method maps to HTTP POST
        // username and password maps to the body of the request
        option (google.api.http) = {
            post: "/api/account/admins/login"
            body: "*"
        };
    }

    // Creates a new admin
    rpc CreateAdmin (CreateAdminRequest) returns (google.protobuf.Empty) {
        // CreateAdmin method maps to HTTP POST
        // Everything maps to the body of the request
        option (google.api.http) = {
            post: "/api/account/admins"
            body: "*"
        };
    }

    // GetAdmin retrieves an admin profile
    rpc GetAdmin (GetAdminRequest) returns (Admin) {
        // GetAdmin maps to HTTP GET
        // user_name maps to URL path parameter
        option (google.api.http) = {
            get: "/api/account/admins/{user_name}"
        };
    }

    // Authenticates admin to check if they are logged in and have valid token
    rpc AuthenticateAdmin (AuthenticateAdminRequest) returns (AuthenticateResponse) {
        // Maps to HTTP POST
        // username maps to request body
        option (google.api.http) = {
            post: "/api/account/admins/auth"
            body: "*"
        };
    }
    
}